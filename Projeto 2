import networkx as nx

ROUTING_TABLES = {
    "Agg1": {
        "192.168.1.0/27": "Edge1",  
        "192.168.2.0/27": "Edge2",  
        "192.168.3.0/27": "Agg2",   
        "192.168.4.0/27": "Agg2"    
    },
    "Agg2": {
        "192.168.3.0/27": "Edge3",  
        "192.168.4.0/27": "Edge4",  
        "192.168.1.0/27": "Agg1",   
        "192.168.2.0/27": "Agg1"    
    },
    "Core": {
        "192.168.1.0/27": "Agg1",
        "192.168.2.0/27": "Agg1",
        "192.168.3.0/27": "Agg2",
        "192.168.4.0/27": "Agg2"
    }
}

def show_all_routing_tables():
    """
    Exibe as tabelas de roteamento estáticas de cada roteador.
    """
    print("=== Tabelas de Roteamento (Estáticas) ===")
    for router, routes in ROUTING_TABLES.items():
        print(f"\n[ {router} ]")
        print("Destino (Rede)      | Próximo Salto")
        print("-" * 35)
        for subnet, next_hop in routes.items():
            print(f"{subnet:<20} -> {next_hop}")
    print("=========================================\n")


def build_network():
    """

    """
    G = nx.Graph()
    

    G.add_node("Core", ip="192.168.100.1", type="core")
    

    G.add_node("Agg1", ip="192.168.101.1", type="aggregation")
    G.add_node("Agg2", ip="192.168.102.1", type="aggregation")

    G.add_node("Edge1", ip="192.168.1.1", type="edge")
    G.add_node("Edge2", ip="192.168.2.1", type="edge")
    G.add_node("Edge3", ip="192.168.3.1", type="edge")
    G.add_node("Edge4", ip="192.168.4.1", type="edge")
    

    G.add_edge("Agg1", "Core", link="fibra óptica")
    G.add_edge("Agg2", "Core", link="fibra óptica")
    

    G.add_edge("Edge1", "Agg1", link="cabo par trançado")
    G.add_edge("Edge2", "Agg1", link="cabo par trançado")
    G.add_edge("Edge3", "Agg2", link="cabo par trançado")
    G.add_edge("Edge4", "Agg2", link="cabo par trançado")
    

    for i in range(1, 4):  
        host_id = f"Host_e1_{i}"
        ip_address = f"192.168.1.{10 + i}"
        G.add_node(host_id, ip=ip_address, type="host")
        G.add_edge("Edge1", host_id, link="fibra óptica")
    

    for i in range(1, 4):
        host_id = f"Host_e2_{i}"
        ip_address = f"192.168.2.{10 + i}"
        G.add_node(host_id, ip=ip_address, type="host")
        G.add_edge("Edge2", host_id, link="fibra óptica")
    

    for i in range(1, 3):
        host_id = f"Host_e3_{i}"
        ip_address = f"192.168.3.{10 + i}"
        G.add_node(host_id, ip=ip_address, type="host")
        G.add_edge("Edge3", host_id, link="fibra óptica")
    

    for i in range(1, 3):
        host_id = f"Host_e4_{i}"
        ip_address = f"192.168.4.{10 + i}"
        G.add_node(host_id, ip=ip_address, type="host")
        G.add_edge("Edge4", host_id, link="fibra óptica")
    
    return G

def ping(G, source, destination):

    try:
        path = nx.shortest_path(G, source=source, target=destination)
        print(f"\nPing de {source} para {destination} bem-sucedido!")
        print("Caminho percorrido:", " -> ".join(path))
        print("Estatísticas: Pacotes enviados: 4, Recebidos: 4, Perda: 0%\n")
    except nx.NetworkXNoPath:
        print(f"\nFalha no Ping: Não há caminho entre {source} e {destination}\n")

def traceroute(G, source, destination):

    try:
        path = nx.shortest_path(G, source=source, target=destination)
        print(f"Traceroute de {source} para {destination}:")
        for idx, hop in enumerate(path, start=1):
            node_ip = G.nodes[hop].get("ip", "N/A")
            print(f" {idx}. {hop} - {node_ip}")
        print()
    except nx.NetworkXNoPath:
        print(f"Traceroute falhou: Não há caminho entre {source} e {destination}\n")

if __name__ == "__main__":
    G = build_network()
    
    show_all_routing_tables()

    ping(G, "Host_e1_1", "Core")
    traceroute(G, "Host_e1_1", "Core")
    
 
    ping(G, "Host_e2_2", "Host_e3_1")
    traceroute(G, "Host_e2_2", "Host_e3_1")
    


